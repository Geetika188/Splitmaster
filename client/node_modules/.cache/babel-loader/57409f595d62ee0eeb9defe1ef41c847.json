{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Hint = void 0;\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar utils_1 = require(\"./utils\");\n\nexports.Hint = function (props) {\n  var _a, _b;\n\n  var child = react_1.default.Children.only(props.children);\n\n  if (((_b = (_a = child.type) === null || _a === void 0 ? void 0 : _a.toString()) === null || _b === void 0 ? void 0 : _b.toLowerCase()) !== 'input') {\n    throw new TypeError(\"react-autocomplete-hint: 'Hint' only accepts an 'input' element as child.\");\n  }\n\n  var options = props.options,\n      disableHint = props.disableHint,\n      allowTabFill = props.allowTabFill,\n      onFill = props.onFill,\n      valueModifier = props.valueModifier;\n  var childProps = child.props;\n  var inputWrapperRef = react_1.useRef(null);\n  var mainInputRef = react_1.useRef(null);\n  var hintWrapperRef = react_1.useRef(null);\n  var hintRef = react_1.useRef(null);\n\n  var _c = react_1.useState(''),\n      unModifiedText = _c[0],\n      setUnmodifiedText = _c[1];\n\n  var _d = react_1.useState(''),\n      text = _d[0],\n      setText = _d[1];\n\n  var _e = react_1.useState(''),\n      hint = _e[0],\n      setHint = _e[1];\n\n  var _f = react_1.useState(),\n      match = _f[0],\n      setMatch = _f[1];\n\n  var _g = react_1.useState(),\n      changeEvent = _g[0],\n      setChangeEvent = _g[1];\n\n  react_1.useEffect(function () {\n    if (typeof options[0] === 'object') {\n      var duplicate = utils_1.getFirstDuplicateOption(options);\n\n      if (duplicate) {\n        console.warn(\"react-autocomplete-hint: \\\"\" + duplicate + \"\\\" occurs more than once and may cause errors. Options should not contain duplicate values!\");\n      }\n    }\n  }, []);\n  react_1.useEffect(function () {\n    if (disableHint) {\n      return;\n    }\n\n    var inputStyle = mainInputRef.current && window.getComputedStyle(mainInputRef.current);\n    inputStyle && styleHint(inputWrapperRef, hintWrapperRef, hintRef, inputStyle);\n  });\n\n  var getMatch = function (text) {\n    if (!text || text === '') {\n      return;\n    }\n\n    if (typeof options[0] === 'string') {\n      var match_1 = options.filter(function (x) {\n        return x.toLowerCase() !== text.toLowerCase() && x.toLowerCase().startsWith(text.toLowerCase());\n      }).sort()[0];\n      return match_1;\n    } else {\n      var match_2 = options.filter(function (x) {\n        return x.label.toLowerCase() !== text.toLowerCase() && x.label.toLowerCase().startsWith(text.toLowerCase());\n      }).sort(function (a, b) {\n        return utils_1.sortAsc(a.label, b.label);\n      })[0];\n      return match_2;\n    }\n  };\n\n  var setHintTextAndId = function (text) {\n    setText(text);\n    var match = getMatch(text);\n    var hint;\n\n    if (!match) {\n      hint = '';\n    } else if (typeof match === 'string') {\n      hint = match.slice(text.length);\n    } else {\n      hint = match.label.slice(text.length);\n    }\n\n    setHint(hint);\n    setMatch(match);\n  };\n\n  var handleOnFill = function () {\n    if (hint !== '' && changeEvent) {\n      changeEvent.target.value = unModifiedText + hint;\n      childProps.onChange && childProps.onChange(changeEvent);\n      setHintTextAndId('');\n      onFill && onFill(match);\n    }\n  };\n\n  var styleHint = function (inputWrapperRef, hintWrapperRef, hintRef, inputStyle) {\n    var _a, _b, _c;\n\n    if ((_a = inputWrapperRef === null || inputWrapperRef === void 0 ? void 0 : inputWrapperRef.current) === null || _a === void 0 ? void 0 : _a.style) {\n      inputWrapperRef.current.style.width = inputStyle.width;\n    }\n\n    if ((_b = hintWrapperRef === null || hintWrapperRef === void 0 ? void 0 : hintWrapperRef.current) === null || _b === void 0 ? void 0 : _b.style) {\n      hintWrapperRef.current.style.fontFamily = inputStyle.fontFamily;\n      hintWrapperRef.current.style.fontSize = inputStyle.fontSize;\n      hintWrapperRef.current.style.width = inputStyle.width;\n      hintWrapperRef.current.style.height = inputStyle.height;\n      hintWrapperRef.current.style.lineHeight = inputStyle.lineHeight;\n      hintWrapperRef.current.style.boxSizing = inputStyle.boxSizing;\n      hintWrapperRef.current.style.margin = utils_1.interpolateStyle(inputStyle, 'margin');\n      hintWrapperRef.current.style.padding = utils_1.interpolateStyle(inputStyle, 'padding');\n      hintWrapperRef.current.style.borderStyle = utils_1.interpolateStyle(inputStyle, 'border', 'style');\n      hintWrapperRef.current.style.borderWidth = utils_1.interpolateStyle(inputStyle, 'border', 'width');\n    }\n\n    if ((_c = hintRef === null || hintRef === void 0 ? void 0 : hintRef.current) === null || _c === void 0 ? void 0 : _c.style) {\n      hintRef.current.style.fontFamily = inputStyle.fontFamily;\n      hintRef.current.style.fontSize = inputStyle.fontSize;\n      hintRef.current.style.lineHeight = inputStyle.lineHeight;\n    }\n  };\n\n  var onChange = function (e) {\n    setChangeEvent(e);\n    e.persist();\n    setUnmodifiedText(e.target.value);\n    var modifiedValue = valueModifier ? valueModifier(e.target.value) : e.target.value;\n    setHintTextAndId(modifiedValue);\n    childProps.onChange && childProps.onChange(e);\n  };\n\n  var onFocus = function (e) {\n    setHintTextAndId(e.target.value);\n    childProps.onFocus && childProps.onFocus(e);\n  };\n\n  var onBlur = function (e) {\n    //Only blur it if the new focus isn't the the hint input\n    if ((hintRef === null || hintRef === void 0 ? void 0 : hintRef.current) !== e.relatedTarget) {\n      setHintTextAndId('');\n      childProps.onBlur && childProps.onBlur(e);\n    }\n  };\n\n  var ARROWRIGHT = 'ArrowRight';\n  var TAB = 'Tab';\n\n  var onKeyDown = function (e) {\n    var caretIsAtTextEnd = function () {\n      // For selectable input types (\"text\", \"search\"), only select the hint if\n      // it's at the end of the input value. For non-selectable types (\"email\",\n      // \"number\"), always select the hint.\n      var isNonSelectableType = e.currentTarget.selectionEnd === null;\n      var caretIsAtTextEnd = isNonSelectableType || e.currentTarget.selectionEnd === e.currentTarget.value.length;\n      return caretIsAtTextEnd;\n    }();\n\n    if (caretIsAtTextEnd && e.key === ARROWRIGHT) {\n      handleOnFill();\n    } else if (caretIsAtTextEnd && allowTabFill && e.key === TAB && hint !== '') {\n      e.preventDefault();\n      handleOnFill();\n    }\n\n    childProps.onKeyDown && childProps.onKeyDown(e);\n  };\n\n  var onHintClick = function (e) {\n    var _a;\n\n    var hintCaretPosition = e.currentTarget.selectionEnd || 0; // If user clicks the position before the first character of the hint, \n    // move focus to the end of the mainInput text\n\n    if (hintCaretPosition === 0) {\n      (_a = mainInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      return;\n    }\n\n    if (!!hint && hint !== '') {\n      handleOnFill();\n      setTimeout(function () {\n        var _a, _b;\n\n        (_a = mainInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n        var caretPosition = text.length + hintCaretPosition;\n        (_b = mainInputRef.current) === null || _b === void 0 ? void 0 : _b.setSelectionRange(caretPosition, caretPosition);\n      }, 0);\n    }\n  };\n\n  var childRef = react_1.cloneElement(child).ref;\n  var mainInput = react_1.cloneElement(child, __assign(__assign({}, childProps), {\n    style: __assign(__assign({}, childProps.style), {\n      boxSizing: 'border-box'\n    }),\n    onChange: onChange,\n    onBlur: onBlur,\n    onFocus: onFocus,\n    onKeyDown: onKeyDown,\n    ref: childRef && typeof childRef !== 'string' ? utils_1.mergeRefs(childRef, mainInputRef) : mainInputRef\n  }));\n  return react_1.default.createElement(\"div\", {\n    className: \"rah-input-wrapper\",\n    style: {\n      position: 'relative'\n    }\n  }, disableHint ? child : react_1.default.createElement(react_1.default.Fragment, null, mainInput, react_1.default.createElement(\"span\", {\n    className: \"rah-hint-wrapper\",\n    ref: hintWrapperRef,\n    style: {\n      display: 'flex',\n      pointerEvents: 'none',\n      backgroundColor: 'transparent',\n      borderColor: 'transparent',\n      boxSizing: 'border-box',\n      boxShadow: 'none',\n      color: 'rgba(0, 0, 0, 0.35)',\n      position: 'absolute',\n      top: 0,\n      left: 0\n    }\n  }, react_1.default.createElement(\"span\", {\n    className: 'rah-text-filler',\n    style: {\n      visibility: 'hidden',\n      pointerEvents: 'none',\n      whiteSpace: 'pre'\n    }\n  }, text), react_1.default.createElement(\"input\", {\n    className: \"rah-hint\",\n    ref: hintRef,\n    onClick: onHintClick,\n    style: {\n      pointerEvents: !hint || hint === '' ? 'none' : 'visible',\n      background: 'transparent',\n      width: '100%',\n      outline: 'none',\n      border: 'none',\n      boxShadow: 'none',\n      padding: 0,\n      margin: 0,\n      color: 'rgba(0, 0, 0, 0.30)',\n      caretColor: 'transparent'\n    },\n    defaultValue: hint,\n    tabIndex: -1\n  }))));\n};","map":null,"metadata":{},"sourceType":"script"}